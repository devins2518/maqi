use super::tokens::Token;
use unicode_segmentation::UnicodeSegmentation;

pub struct Scanner<'str> {
    // TODO: Change to scan on a stream
    source: &'str str,
    pub tokens: Vec<Token>,
}

impl<'str> Scanner<'str> {
    pub fn new(source: &'str str) -> Self {
        Self {
            source,
            tokens: Vec::new(),
        }
    }

    pub fn scan_tokens(&mut self) {
        for bound in self.source.split_word_bounds() {
            let token = match bound {
                "$" => Token::DOLLAR,
                "(" => Token::LPAREN,
                ")" => Token::RPAREN,
                "[" => Token::LBRACKET,
                "]" => Token::RBRACKET,
                "{" => Token::LBRACE,
                "}" => Token::RBRACE,
                "<" => Token::LANGLE,
                ">" => Token::RANGLE,
                "+" => Token::PLUS,
                "/" => Token::FWSLASH,
                "\\" => Token::BWSLASH,
                "=" => Token::EQUAL,
                "==" => Token::DBLEQUAL,
                "-" => Token::HYPHEN,
                "\\*" => Token::BWSLASHSTAR,
                "*" => Token::STAR,
                "%" => Token::PERCENT,
                "~{" => Token::APPROXLBRACE,
                "." => Token::PERIOD,
                ":" => Token::COLON,
                "," => Token::COMMA,
                "_" => Token::UNDERSCORE,
                "\r\n" => Token::CRLF,
                "\"" => Token::DQUOTE,
                " " => Token::SP,

                "ALERT" => Token::Alert,
                "ALL" => Token::All,
                "ALREADYEXISTS" => Token::AlreadyExists,
                "ANSWERED" => Token::Answered,
                "APPEND" => Token::Append,
                "APPENDUID" => Token::AppendUID,
                "APPLICATION" => Token::Application,
                "Apr" => Token::Apr,
                "AUDIO" => Token::Audio,
                "Aug" => Token::Aug,
                "AUTH" => Token::Auth,
                "AUTHENTICATE" => Token::Authenticate,
                "AUTHENTICATIONFAILED" => Token::AuthenticationFailed,
                "AUTHORIZATIONFAILED" => Token::AuthorizationFailed,
                "Answered" => Token::BWSlashAnswered,
                "Deleted" => Token::BWSlashDeleted,
                "Draft" => Token::BWSlashDraft,
                "Flagged" => Token::BWSlashFlagged,
                "HasChildren" => Token::BWSlashHasChildren,
                "HasNoChildren" => Token::BWSlashHasNoChildren,
                "Marked" => Token::BWSlashMarked,
                "Noinferiors" => Token::BWSlashNoInferiors,
                "Noselect" => Token::BWSlashNoSelect,
                "NonExistent" => Token::BWSlashNonExistent,
                "Recent" => Token::BWSlashRecent,
                "Remote" => Token::BWSlashRemote,
                "Seen" => Token::BWSlashSeen,
                "Subscribed" => Token::BWSlashSubscribed,
                "Unmarked" => Token::BWSlashUnmarked,
                "BAD" => Token::Bad,
                "BADCHARSET" => Token::BadCharset,
                "BASE64" => Token::Base64,
                "BCC" => Token::Bcc,
                "BEFORE" => Token::Before,
                "BINARY" => Token::Binary,
                "BINARY.SIZE" => Token::BinaryDotSize,
                "BODY" => Token::Body,
                "BODY.PEEK" => Token::BodyDotPeek,
                "BYE" => Token::Bye,
                "CANNOT" => Token::Cannot,
                "CAPABILITY" => Token::Capability,
                "CC" => Token::Cc,
                "CHARSET" => Token::Charset,
                "CHILDINFO" => Token::ChildInfo,
                "CHILDREN" => Token::Children,
                "CLIENTBUG" => Token::ClientBug,
                "CLOSE" => Token::Close,
                "CLOSED" => Token::Closed,
                "CONTACTADMIN" => Token::ContactAdmin,
                "COPY" => Token::Copy,
                "COPYUID" => Token::CopyUID,
                "CORRUPTION" => Token::Corruption,
                "COUNT" => Token::Count,
                "CREATE" => Token::Create,
                "Dec" => Token::Dec,
                "DELETE" => Token::Delete,
                "DELETED" => Token::Deleted,
                "$Forwarded" => Token::DollarForwarded,
                "$Junk" => Token::DollarJunk,
                "$MDNSent" => Token::DollarMDNSent,
                "$NotJunk" => Token::DollarNotJunk,
                "$Phishing" => Token::DollarPhishing,
                "DONE" => Token::Done,
                ".NOT" => Token::DotNot,
                ".PEEK" => Token::DotPeek,
                ".SILENT" => Token::DotSilent,
                "DRAFT" => Token::Draft,
                "ESEARCH" => Token::ESearch,
                "8BIT" => Token::EightBit,
                "ENABLE" => Token::Enable,
                "ENABLED" => Token::Enabled,
                "ENVELOPE" => Token::Envelope,
                "EXAMINE" => Token::Examine,
                "EXISTS" => Token::Exists,
                "EXPIRED" => Token::Expired,
                "EXPUNGE" => Token::Expunge,
                "EXPUNGEISSUED" => Token::ExpungeIssued,
                "FAST" => Token::Fast,
                "Feb" => Token::Feb,
                "FETCH" => Token::Fetch,
                "FLAGGED" => Token::Flagged,
                "FLAGS" => Token::Flags,
                "FONT" => Token::Font,
                "FROM" => Token::From,
                "FULL" => Token::Full,
                "GLOBAL" => Token::Global,
                "HASCHILDREN" => Token::HasChildren,
                "HEADER" => Token::Header,
                "HEADER.FIELDS" => Token::HeaderDotFields,
                "IMAP4rev1" => Token::IMAP4Rev1,
                "IMAP4rev2" => Token::IMAP4Rev2,
                "IDLE" => Token::Idle,
                "IMAGE" => Token::Image,
                "INUSE" => Token::InUse,
                "INBOX" => Token::Inbox,
                "INTERNALDATE" => Token::Internaldate,
                "Jan" => Token::Jan,
                "Jul" => Token::Jul,
                "Jun" => Token::Jun,
                "KEYWORD" => Token::Keyword,
                "LARGER" => Token::Larger,
                "LIMIT" => Token::Limit,
                "LIST" => Token::List,
                "LOGIN" => Token::Login,
                "LOGOUT" => Token::Logout,
                "Mar" => Token::Mar,
                "MAX" => Token::Max,
                "May" => Token::May,
                "MESSAGE" => Token::Message,
                "MESSAGES" => Token::Messages,
                "MIME" => Token::Mime,
                "MIN" => Token::Min,
                "MODEL" => Token::Model,
                "MOVE" => Token::Move,
                "NAMESPACE" => Token::Namespace,
                "NIL" => Token::Nil,
                "NO" => Token::No,
                "NOPERM" => Token::NoPerm,
                "NONEXISTENT" => Token::NonExistent,
                "NOOP" => Token::Noop,
                "NOTSAVED" => Token::NotSaved,
                "Nov" => Token::Nov,
                "Oct" => Token::Oct,
                "OK" => Token::Ok,
                "OLDNAME" => Token::OldName,
                "ON" => Token::On,
                "OR" => Token::Or,
                "OVERQUOTA" => Token::OverQuota,
                "PARSE" => Token::Parse,
                "PERMANENTFLAGS" => Token::PermanentFlags,
                "PREAUTH" => Token::PreAuth,
                "PRIVACYREQUIRED" => Token::PrivacyRequired,
                "QUOTE-PRINTABLE" => Token::QuotedPrintable,
                "RFC822" => Token::RFC822,
                "RFC822.SIZE" => Token::RFC822DotSize,
                "READ" => Token::Read,
                "WRITE" => Token::Write,
                "ONLY" => Token::Only,
                "RECURSIVEMATCH" => Token::RecursiveMatch,
                "REMOTE" => Token::Remote,
                "RETURN" => Token::Return,
                "SAVE" => Token::Save,
                "SEARCH" => Token::Search,
                "SEEN" => Token::Seen,
                "SELECT" => Token::Select,
                "SENTBEFORE" => Token::SentBefore,
                "SENTON" => Token::SentOn,
                "SENTSINCE" => Token::SentSince,
                "Sep" => Token::Sep,
                "SERVERBUG" => Token::ServerBug,
                "7BIT" => Token::SevenBit,
                "SINCE" => Token::Since,
                "SIZE" => Token::Size,
                "SMALLER" => Token::Smaller,
                "STARTTLS" => Token::StartTLS,
                "STATUS" => Token::Status,
                "STORE" => Token::Store,
                "STRUCTURE" => Token::Structure,
                "SUBJECT" => Token::Subject,
                "SUBSCRIBED" => Token::Subscribed,
                "TAG" => Token::Tag,
                "TEXT" => Token::Text,
                "TO" => Token::To,
                "TRYCREATE" => Token::TryCreate,
                "UID" => Token::UID,
                "UIDNEXT" => Token::UIDNext,
                "UIDNOTSTICKY" => Token::UIDNotSticky,
                "UIDVALIDITY" => Token::UIDValidity,
                "UNANSWERED" => Token::Unanswered,
                "UNAVAILABLE" => Token::Unavailable,
                "UNDELETED" => Token::Undeleted,
                "UNDRAFT" => Token::Undraft,
                "UNFLAGGED" => Token::Unflagged,
                "UNKEYWORD" => Token::Unkeyword,
                "UNKNOWN-CTE" => Token::UnknownHyphenCTE,
                "UNSEEN" => Token::Unseen,
                "UNSELECT" => Token::Unselect,
                "UNSUBSCRIBE" => Token::Unsubscribe,
                "vender." => Token::VenderDot,
                "VIDEO" => Token::Video,
                _ => Token::Other(String::from(bound)),
            };
            self.tokens.push(token);
        }
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_full_responses() {
        let rs = [
            "* OK [CAPABILITY IMAP4rev2 STARTTLS AUTH=GSSAPI]",
            "A01 OK STARTTLS complete",
            "* CAPABILITY IMAP4rev2 AUTH=GSSAPI AUTH=PLA",
            "* FLAGS (\\Answered \\Flagged \\Deleted \\Seen \\Draft)",
            "* LIST () \"/\" blurdybloop",
            "A932 OK [READ-ONLY] EXAMINE complete",
            "* CAPABILITY IMAP4rev1 UNSELECT IDLE NAMESPACE QUOTA ID XLIST CHILDREN X-GM-EXT-1 XYZZY SASL-IR AUTH=XOAUTH2 AUTH=PLAIN AUTH=PLAIN-CLIENTTOKEN AUTH=OAUTHBEARER AUTH=XOAUTH"
        ];
        let ts = [
            vec![
                Token::STAR,
                Token::SP,
                Token::Ok,
                Token::SP,
                Token::LBRACKET,
                Token::Capability,
                Token::SP,
                Token::IMAP4Rev2,
                Token::SP,
                Token::StartTLS,
                Token::SP,
                Token::Auth,
                Token::EQUAL,
                Token::Other(String::from("GSSAPI")),
                Token::RBRACKET,
            ],
            vec![
                Token::Other(String::from("A01")),
                Token::SP,
                Token::Ok,
                Token::SP,
                Token::StartTLS,
                Token::SP,
                Token::Other(String::from("complete")),
            ],
            vec![
                Token::STAR,
                Token::SP,
                Token::Capability,
                Token::SP,
                Token::IMAP4Rev2,
                Token::SP,
                Token::Auth,
                Token::EQUAL,
                Token::Other(String::from("GSSAPI")),
                Token::SP,
                Token::Auth,
                Token::EQUAL,
                Token::Other(String::from("PLA")),
            ],
            vec![
                Token::STAR,
                Token::SP,
                Token::Flags,
                Token::SP,
                Token::LPAREN,
                Token::BWSLASH,
                Token::BWSlashAnswered,
                Token::SP,
                Token::BWSLASH,
                Token::BWSlashFlagged,
                Token::SP,
                Token::BWSLASH,
                Token::BWSlashDeleted,
                Token::SP,
                Token::BWSLASH,
                Token::BWSlashSeen,
                Token::SP,
                Token::BWSLASH,
                Token::BWSlashDraft,
                Token::RPAREN,
            ],
            vec![
                Token::STAR,
                Token::SP,
                Token::List,
                Token::SP,
                Token::LPAREN,
                Token::RPAREN,
                Token::SP,
                Token::DQUOTE,
                Token::FWSLASH,
                Token::DQUOTE,
                Token::SP,
                Token::Other(String::from("blurdybloop")),
            ],
            vec![
                Token::Other(String::from("A932")),
                Token::SP,
                Token::Ok,
                Token::SP,
                Token::LBRACKET,
                Token::Read,
                Token::HYPHEN,
                Token::Only,
                Token::RBRACKET,
                Token::SP,
                Token::Examine,
                Token::SP,
                Token::Other(String::from("complete")),
            ],
            vec![
                Token::STAR,
                Token::SP,
                Token::Capability,
                Token::SP,
                Token::IMAP4Rev1,
                Token::SP,
                Token::Unselect,
                Token::SP,
                Token::Idle,
                Token::SP,
                Token::Namespace,
                Token::SP,
                Token::Other(String::from("QUOTA")),
                Token::SP,
                Token::Other(String::from("ID")),
                Token::SP,
                Token::Other(String::from("XLIST")),
                Token::SP,
                Token::Children,
                Token::SP,
                Token::Other(String::from("X")),
                Token::HYPHEN,
                Token::Other(String::from("GM")),
                Token::HYPHEN,
                Token::Other(String::from("EXT")),
                Token::HYPHEN,
                Token::Other(String::from("1")),
                Token::SP,
                Token::Other(String::from("XYZZY")),
                Token::SP,
                Token::Other(String::from("SASL")),
                Token::HYPHEN,
                Token::Other(String::from("IR")),
                Token::SP,
                Token::Auth,
                Token::EQUAL,
                Token::Other(String::from("XOAUTH2")),
                Token::SP,
                Token::Auth,
                Token::EQUAL,
                Token::Other(String::from("PLAIN")),
                Token::SP,
                Token::Auth,
                Token::EQUAL,
                Token::Other(String::from("PLAIN")),
                Token::SP,
                Token::HYPHEN,
                Token::Other(String::from("CLIENTTOKEN")),
                Token::SP,
                Token::Auth,
                Token::EQUAL,
                Token::Other(String::from("OAUTHBEARER")),
                Token::SP,
                Token::Auth,
                Token::EQUAL,
                Token::Other(String::from("XOAUTH")),
            ],
        ];

        for (i, s) in rs.iter().enumerate() {
            let mut scanner = Scanner::new(s);
            scanner.scan_tokens();
            assert_eq!(scanner.tokens, ts[i])
        }
    }

    #[test]
    fn test_autheq() {
        let rs = "AUTH=GSSAPI";

        let mut scanner = Scanner::new(rs);
        scanner.scan_tokens();

        assert_eq!(
            scanner.tokens,
            vec![
                Token::Auth,
                Token::EQUAL,
                Token::Other(String::from("GSSAPI"))
            ]
        );
    }
}
